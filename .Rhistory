# Häufigkeitstabelle
#barplot(table(df_Compare$business_model, df_Compare$total_revenue ),
#       xlab="Business Model", ylab="Umsatz", beside=TRUE)
barplot(df_Compare$total_revenue,df_Compare$total_cost, names.arg=c("total_revenue", rep("", 11), "Experi_13"))
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
# Häufigkeitstabelle
#barplot(table(df_Compare$business_model, df_Compare$total_revenue ),
#       xlab="Business Model", ylab="Umsatz", beside=TRUE)
barplot(df_Compare$total_revenue, names.arg=c("total_revenue", rep("", 11), "Experi_13"))
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
# Häufigkeitstabelle
barplot(table(df_Compare$business_model, df_Compare$total_revenue ),
xlab="Business Model", ylab="Umsatz", beside=TRUE)
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
# Häufigkeitstabelle
barplot(df_Compare$business_model, df_Compare$total_revenue ),
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
# Häufigkeitstabelle
barplot(df_Compare$business_model, df_Compare$total_revenue,
xlab="Business Model", ylab="Umsatz", beside=TRUE)
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
# Häufigkeitstabelle
barplot((df_Compare$business_model, df_Compare$total_revenue),
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
# Häufigkeitstabelle
barplot(df_Compare$business_model,
xlab="Business Model", ylab="Umsatz", beside=TRUE)
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
# Häufigkeitstabelle
barplot(df_Compare$total_revenue,
xlab="Business Model", ylab="Umsatz", beside=TRUE)
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
# Häufigkeitstabelle
barplot(df_Compare$total_revenue, df_Compare$`df_Cost$total_cost`,
xlab="Business Model", ylab="Umsatz", beside=TRUE)
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
# Häufigkeitstabelle
barplot(df_Compare$total_revenue, df_Compare$fulfilment_strategy,
xlab="Business Model", ylab="Umsatz", beside=TRUE)
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
# Häufigkeitstabelle
barplot(df_Compare$total_revenue, df_Compare$business_model,
xlab="Business Model", ylab="Umsatz", beside=TRUE)
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
# Häufigkeitstabelle
barplot(df_Compare$total_revenue, xlab="Business Model", ylab="Umsatz", beside=TRUE)
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
# Datum von Shipment Spalte "last_stop_requested_arrival_to_date" umformatieren, sodass Kalenderwoche angezeigt wird
CalendarWeekFormat = as.Date(shipments$last_stop_requested_arrival_to_date)
shipments$CalendarWeek = strftime(CalendarWeekFormat, format = "%Y-%V") #Year-CalendarWeek
# Unbennen der ersten Spalte der Tabelle margin
colnames(margin)[1] = c("CalendarWeek")
# Beide Tabellen "shipments" und "margin" nach "CalendarWeek" mergen
TableBind = merge(shipments, margin, by = "CalendarWeek")
head(TableBind)
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
library(readr)
library(dplyr)
library("zoo")
library("forecast")
library("ggplot2")
library("mosaic")
library("Metrics")
library("dummies")
shipments <- read.csv("data/shipment_FINAL_20210115.csv")
margin <- read.csv("data/margin_by_week_FINAL_20210115.csv")
head(shipments)
head(margin)
count_business_model = shipments %>%
count(business_model)
count_business_model
ggplot(count_business_model, aes(business_model,n)) +
geom_col()
str(shipments)
str(margin)
# Datum von Shipment Spalte "last_stop_requested_arrival_to_date" umformatieren, sodass Kalenderwoche angezeigt wird
CalendarWeekFormat = as.Date(shipments$last_stop_requested_arrival_to_date)
shipments$CalendarWeek = strftime(CalendarWeekFormat, format = "%Y-%V") #Year-CalendarWeek
# Unbennen der ersten Spalte der Tabelle margin
colnames(margin)[1] = c("CalendarWeek")
# Beide Tabellen "shipments" und "margin" nach "CalendarWeek" mergen
TableBind = merge(shipments, margin, by = "CalendarWeek")
head(TableBind)
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
library(readr)
library(dplyr)
library("zoo")
library("forecast")
library("ggplot2")
library("mosaic")
library("Metrics")
library("dummies")
shipments <- read.csv("data/shipment_FINAL_20210115.csv")
margin <- read.csv("data/margin_by_week_FINAL_20210115.csv")
head(shipments)
head(margin)
count_business_model = shipments %>%
count(business_model)
count_business_model
ggplot(count_business_model, aes(business_model,n)) +
geom_col()
str(shipments)
str(margin)
# Datum von Shipment Spalte "last_stop_requested_arrival_to_date" umformatieren, sodass Kalenderwoche angezeigt wird
CalendarWeekFormat = as.Date(shipments$last_stop_requested_arrival_to_date)
shipments$CalendarWeek = strftime(CalendarWeekFormat, format = "%Y-%V") #Year-CalendarWeek
# Unbennen der ersten Spalte der Tabelle margin
colnames(margin)[1] = c("CalendarWeek")
# Beide Tabellen "shipments" und "margin" nach "CalendarWeek" mergen
TableBind = merge(shipments, margin, by = "CalendarWeek")
head(TableBind)
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
library(readr)
library(dplyr)
library("zoo")
library("forecast")
library("ggplot2")
library("mosaic")
library("Metrics")
library("dummies")
shipments <- read.csv("data/shipment_FINAL_20210115.csv")
margin <- read.csv("data/margin_by_week_FINAL_20210115.csv")
head(shipments)
head(margin)
str(shipments)
str(margin)
# Datum von Shipment Spalte "last_stop_requested_arrival_to_date" umformatieren, sodass Kalenderwoche angezeigt wird
CalendarWeekFormat = as.Date(shipments$last_stop_requested_arrival_to_date)
shipments$CalendarWeek = strftime(CalendarWeekFormat, format = "%Y-%V") #Year-CalendarWeek
# Unbennen der ersten Spalte der Tabelle margin
colnames(margin)[1] = c("CalendarWeek")
# Beide Tabellen "shipments" und "margin" nach "CalendarWeek" mergen
TableBind = merge(shipments, margin, by = "CalendarWeek")
head(TableBind)
#TODO: Grafik hierzu waere gut
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~ business_model + fulfilment_strategy, data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
#TODO: Grafik hierzu waere gut
group1 = aggregate(transport_price_booked ~ fulfilment_strategy + business_model, data=shipments, sum)
group2 = aggregate(transport_cost_assigned  ~ fulfilment_strategy + business_model, data=shipments, sum)
differenz = group1[3] - group2[3]
colnames(differenz) = "differenz"
differenz
groupbind = cbind(group1, group2[3], differenz)
groupbind
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~
business_model + fulfilment_strategy,
data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~
business_model + fulfilment_strategy,
data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
#TODO: Grafik hierzu waere gut
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~
business_model + fulfilment_strategy,
data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~
business_model + fulfilment_strategy,
data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, total_cost)
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~
business_model + fulfilment_strategy,
data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~
business_model + fulfilment_strategy,
data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare
#TODO: Grafik hierzu waere gut
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~
business_model + fulfilment_strategy,
data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~
business_model + fulfilment_strategy,
data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare[4] = "total_cost"
#TODO: Grafik hierzu waere gut
df_Compare
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~
business_model + fulfilment_strategy,
data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~
business_model + fulfilment_strategy,
data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
df_Compare[4] = "total_cost"
df_Compare
#TODO: Grafik hierzu waere gut
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~
business_model + fulfilment_strategy,
data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~
business_model + fulfilment_strategy,
data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
colnames(df_Compare)[4] = "total_cost"
df_Compare
#TODO: Grafik hierzu waere gut
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~
business_model + fulfilment_strategy,
data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~
business_model + fulfilment_strategy,
data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
#umbenennen
colnames(df_Compare)[4] = "total_cost"
df_Compare
#TODO: Grafik hierzu waere gut
group1 = aggregate(transport_price_booked ~
fulfilment_strategy + business_model, data=shipments, sum)
group2 = aggregate(transport_cost_assigned  ~
fulfilment_strategy + business_model, data=shipments, sum)
differenz = group1[3] - group2[3]
colnames(differenz) = "differenz"
groupbind = cbind(group1, group2[3], differenz)
groupbind
#TODO: Grafik von entstandene Kosten bei Lieferung waere gut
library(readr)
library(dplyr)
library("zoo")
library("forecast")
library("ggplot2")
library("mosaic")
library("Metrics")
library("dummies")
shipments <- read.csv("data/shipment_FINAL_20210115.csv")
margin <- read.csv("data/margin_by_week_FINAL_20210115.csv")
head(shipments)
head(margin)
str(shipments)
str(margin)
# Datum von Shipment Spalte "last_stop_requested_arrival_to_date" umformatieren,
# sodass Kalenderwoche angezeigt wird
CalendarWeekFormat = as.Date(shipments$last_stop_requested_arrival_to_date)
shipments$CalendarWeek = strftime(CalendarWeekFormat, format = "%Y-%V") #Year-CalendarWeek
# Unbenennen der ersten Spalte der Tabelle margin
colnames(margin)[1] = c("CalendarWeek")
# Beide Tabellen "shipments" und "margin" nach "CalendarWeek" mergen
TableBind = merge(shipments, margin, by = "CalendarWeek")
head(TableBind)
#TODO: Zeitliche Grafik mit Umsaetzen + Kosten hierzu waere gut
# Umsatz aggrerieren
df_Revenue = data.frame(aggregate(total_revenue ~
business_model + fulfilment_strategy,
data=TableBind, sum))
# Kosten aggrerieren
df_Cost = data.frame(aggregate(total_cost ~
business_model + fulfilment_strategy,
data=TableBind, sum))
# Beide DataFrames mergen
df_Compare = cbind(df_Revenue, df_Cost$total_cost)
#umbenennen
colnames(df_Compare)[4] = "total_cost"
df_Compare
#TODO: Grafik von Kosten und Einnahmen hierzu waere gut
group1 = aggregate(transport_price_booked ~
fulfilment_strategy + business_model, data=shipments, sum)
group2 = aggregate(transport_cost_assigned  ~
fulfilment_strategy + business_model, data=shipments, sum)
differenz = group1[3] - group2[3]
colnames(differenz) = "differenz"
groupbind = cbind(group1, group2[3], differenz)
groupbind
#TODO: Grafik von entstandene Kosten bei Lieferung waere gut
shipments %>%
group_by(business_model) %>%
summarize(mean_margin = mean(margin, na.rm = TRUE))
#rm(list = ls())
library("readr")
library("dplyr")
library("zoo")
library("forecast")
library("ggplot2")
library("mosaic")
library("Metrics")
library("dummies")
library("janitor")
install.packages("plotly")
library("plotly")
shipments %>%
group_by(business_model) %>%
summarize(mean_margin = mean(margin, na.rm = TRUE))
shipments %>%
group_by(business_model) %>%
summarize(mean_margin = mean(margin))
shipments_without_cancellation = subset(shipments, shipment_state != "cancelled")
shipments_without_cancellation$margin = shipments_without_cancellation$total_revenue - shipments_without_cancellation$total_cost
inspect(shipments_without_cancellation)
shipments_without_cancellation = subset(shipments, shipment_state != "cancelled")
shipments_without_cancellation$margin = shipments_without_cancellation$total_revenue - shipments_without_cancellation$total_cost
inspect(shipments_without_cancellation)
shipments %>%
group_by(business_model) %>%
summarize(mean_margin = mean(margin, na.rm = TRUE))
shipments_without_cancellation %>%
group_by(business_model) %>%
summarize(mean_margin = mean(margin, na.rm = TRUE))
shipments_without_cancellation %>%
group_by(business_model) %>%
summarize(mean_margin = mean(margin, na.rm = TRUE))
ggplot(shipments_without_cancellation,
aes(factor(business_model),
fill = factor(business_model))) +
geom_bar()
# durchschnittliche Marge, aggregiert nach custom rate shipment (falsch, wahr)
shipments_without_cancellation %>%
group_by(custom_rate_shipment) %>%
summarize(mean_margin = mean(margin, na.rm = TRUE))
# Visualisierung
tapply(shipments_without_cancellation$margin ,shipments_without_cancellation$custom_rate_shipment ,sum)
# Visualisierung
tapply(shipments_without_cancellation$margin ,shipments_without_cancellation$custom_rate_shipment ,sum)
# durchschnittliche Marge, aggregiert nach custom rate shipment (falsch, wahr)
shipments_without_cancellation %>%
group_by(custom_rate_shipment) %>%
summarize(mean_margin = mean(margin, na.rm = TRUE))
# Visualisierung
tapply(shipments_without_cancellation$margin ,shipments_without_cancellation$custom_rate_shipment ,sum)
tapply(shipments_without_cancellation$margin ,shipments_without_cancellation$custom_rate_shipment ,sum)
tapply(shipments_without_cancellation$margin ,shipments_without_cancellation$custom_rate_shipment ,sum)
# durchschnittliche Marge, aggregiert nach custom rate shipment (falsch, wahr)
shipments_without_cancellation %>%
group_by(custom_rate_shipment) %>%
summarize(mean_margin = mean(margin, na.rm = TRUE))
#rm(list = ls())
library("readr")
library("dplyr")
library("zoo")
library("forecast")
library("ggplot2")
library("mosaic")
library("Metrics")
library("dummies")
library("janitor")
install.packages("plotly")
library("plotly")
shipments_without_cancellation = subset(shipments, shipment_state != "cancelled")
shipments_without_cancellation$margin = shipments_without_cancellation$total_revenue - shipments_without_cancellation$total_cost
inspect(shipments_without_cancellation)
# durchschnittliche Marge, aggregiert nach buusiness model (3PL, 4PL)
shipments_without_cancellation %>%
group_by(business_model) %>%
summarize(mean_margin = mean(margin, na.rm = TRUE))
# VIsualisierung
ggplot(shipments_without_cancellation,
aes(factor(business_model),
fill = factor(business_model))) +
geom_bar()
# durchschnittliche Marge, aggregiert nach custom rate shipment (falsch, wahr)
shipments_without_cancellation %>%
group_by(custom_rate_shipment) %>%
summarize(mean_margin = mean(margin, na.rm = TRUE))
# Visualisierung
tapply(shipments_without_cancellation$margin ,shipments_without_cancellation$custom_rate_shipment ,sum)
# Visualisierung
tapply(shipments_without_cancellation$margin ,shipments_without_cancellation$custom_rate_shipment ,sum)
# Visualisierung
tapply(shipments_without_cancellation$margin ,shipments_without_cancellation$custom_rate_shipment ,sum)
View(shipments_without_cancellation)
# Visualisierung
tapply(shipments_without_cancellation$margin ,shipments_without_cancellation$custom_rate_shipment ,sum)
shipments_without_cancellation %>%
group_by(custom_rate_shipment) %>%
summarize(mean_margin = mean(margin, na.rm = TRUE))
tapply(shipments_without_cancellation$margin ,shipments_without_cancellation$custom_rate_shipment ,sum)
ggplot(shipments_without_cancellation,
aes(factor(custom_rate_shipment),
fill = factor(custom_rate_shipment))) +
geom_bar()
shipments_without_cancellation %>%
group_by(fulfilment_strategy) %>%
summarize(mean_margin = mean(margin, na.rm = TRUE))
tapply(shipments_without_cancellation$margin ,shipments_without_cancellation$fulfilment_strategy ,sum)
# Visualisierung
ggplot(shipments_without_cancellation,
aes(factor(fulfilment_strategy),
fill = factor(fulfilment_strategy))) +
geom_bar()
xtabs(~ custom_rate_shipment + fulfilment_strategy, data = shipments_without_cancellation)
shipments_without_cancellation %>%
group_by(lane_domain) %>%
summarize(mean_margin = mean(margin, na.rm = TRUE))
shipments_without_cancellation %>%
group_by(lane_domain) %>%
summarize(mean_margin = mean(margin, na.rm = TRUE))
tapply(shipments_without_cancellation$margin ,shipments_without_cancellation$lane_domain ,sum)
ggplot(shipments_without_cancellation,
aes(factor(lane_domain),
fill = factor(lane_domain))) +
geom_bar()
cor(shipments_without_cancellation$stops_count, shipments_without_cancellation$margin)
cor(shipments_without_cancellation$stops_count, shipments_without_cancellation$margin, method = "kendall")
cor(shipments_without_cancellation$stops_count, shipments_without_cancellation$margin, method = "spearman")
